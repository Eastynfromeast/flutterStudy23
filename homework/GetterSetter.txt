# Getter & Setter
https://inpa.tistory.com/entry/JS-%F0%9F%93%9A-getter-setter-%EB%9E%80
    
    ## Getter와 Setter란?
    : 객체 지향 프로그래밍에서 사용되는 개념으로 일종의 메서드
        - Getter : 객체의 속성(property)를 반환하는 메서드
            ex) getName();
        - Setter : 객체의 속성 값을 설정, 변경하는 메서드
            ex) setName(value);
        
    ## 사용하는 이유는?
        - 객체 내부 속성에 직접 접근하지 않아 객체의 정보 은닉이 가능 => 보안 강화
        - 코드의 안정성과 유지 보수성
        - 옳지 않은 값을 넣으려 할 경우를 미연에 방지 
    
    ## JavaScriptd에서 Getter&Setter
        ES6에서는 객체 리터럴 안에서 속성 이름 앞에 get 또는 set 키워드만 붙여 Getter와 Setter를 정의할 수 있다!
        ex) get userName(){};
            set userName(value){};
        - 함수 호출 형식이 아니라, 일반 프로퍼티처럼 접근해서 사용됨
        - 위를 구현하면 객체엔 userName이라는 가상의 프로퍼티가 생기는데, 실제로 존재하지는 않음

    ## 자바스크립트의 객체의 프로퍼티
        - 데이터 프로퍼티 : 객체 내부에 저장된 실제 데이터 값 -> 일반적인 프로퍼티
        - 접근자 프로퍼티 : 키와 값을 가지지 않고 getter와 setter라는 함수를 가지는 특수한 프로퍼티
            => Getter와 Setter 함수 자체가 접근자 프로퍼티

    ## 사용법 및 주의점?
        - Getter만 선언한 경우, 값을 할당하려고 하면 에러 발생
        - 데이터 프로퍼티와 접근자 프로퍼티명이 같을 경우, Setter의 무한 루프에 빠지게 됨
           ->  왜? setter 함수 내에서 자기 자신을 호출했기 때문
           =>  접근자 프로퍼티명과 데이터 프로퍼티명을 다르게 하거나, 내부적으로 다른 변수에 값을 저장해야