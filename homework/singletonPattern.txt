# Singleton pattern, Observer pattern

> **목표**
싱글턴 패턴과 옵저버 패턴가 나온 이유, 개념, 활용에 대해 공부하고 말로 설명할 수 있을 정도로 이해한다
> 

# Singleton pattern

[소프트웨어 디자인 패턴](https://ko.wikipedia.org/wiki/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4)에서 **싱글턴 패턴**(Singleton pattern)을 따르는 클래스는, 

생성자가 여러 차례 호출되더라도 **실제로 생성되는 객체는 하나**이고 

**최초 생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴**한다. 

이와 같은 디자인 유형을 **싱글턴 패턴**이라고 한다. 주로 공통된 객체를 여러개 생성해서 사용하는 DBCP(DataBase Connection Pool)와 같은 상황에서 많이 사용된다. (출처: [위키피디아](https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80%ED%84%B4_%ED%8C%A8%ED%84%B4))

### 싱글턴이란?

 **오직 하나의 객체만을 생성할 수 있는 클래스**

- 일반적으로 싱글턴 객체에 대한 참조를 public static 필드나 public static method 로 노출하므로 어디에서나 싱글턴 객체에 접근 가능

어플리케이션이 시작될 때 어떤 클래스가 최초 한번만 메모리를 할당하고(static) 그 메모리에 인스턴스를 만들어 사용하는 디자인 패턴

동시성(Concurrency) 문제를 고려해서 설계해야함

```dart
// Dart의 싱글턴
class Singleton {
    Singleton._();
    static Singleton get instance => Singleton._();
}
```

**public static final field**

- 객체가 하나만을 보장하기 위해 정적 필드 (static field)를 사용
    - 모든 객체가 공유하는 필드 만들 수 있고
    - 한번만 생성되고 별도의 메모리 공간에 저장됨
- **final로 선언** : 외부에서 자유롭게 접근할 수 있기 때문에 이 필드에 다른 객체가 할당되거나, 이미 할당했는데 싱글턴 내부에서 다시 객체를 할당하는 실수가 없도록 **final로 선언**해야 합니다.
- **생성자의 접근 범위 제한** : 그리고 외부에서 생성자를 통해 객체를 생성할 수 없도록 생성자의 접근 범위를 **private**로 제한해야 합니다.

## 싱글턴 패턴의 장단점

### 장점

1. 고정된 메모리 영역을 할당 받으면서 한번의 new로 인스턴스를 사용하기 때문에 메모리 낭비를 방지할 수 있다. (인스턴스 : 실행 중인 임의의 프로세스, 클래스의 현재 생성된 오브젝트를 지칭)
2. 클래스 인스턴스가 전역 → 다른 클래스의 인스턴스들이 데이터를 공유하기 쉬움
3. 인스턴스가 절대적으로 한개만 존재
4. 두번째 이용부터 객체 로딩 시간이 줆 → 성능이 좋아짐 
5. ⇒ DBCP(DataBase Connection Pool), 캐시, 로그 기록 객체처럼 공통된 객체를 여러 개 생성해서 사용해야 하는 상황에서 많이 사용된다
    1. 안드로이드 앱 : 각 액티비티들이나 클래스마다 주요 클래스들을 하나하나 전달하는게 번거롭기 때문에 싱글톤 클래스를 만들어 어디서든 접근 가능하도록 설계

### 단점

1. 객체 지향 설계 원칙 중 개방 - 폐쇄 원칙을 위배 : 싱글톤 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유시킬 경우, 다른 클래스의 인스턴스들 간에 결합도가 높아져 원칙을 위배하게 됨
2. 결합도가 높아지면 유지보수가 힘들고
3. 테스트하기가 어렵다
4. 데이터 경쟁이 일어나기 쉽다

⇒ 반드시 싱글톤이 필요한 상황이 아니면 지양하는 것이 좋다 

## 멀티 스레드 환경에서 안전한 싱글톤 만들기

### 지연 초기화 (Lazy initialization)

- Thread safe(스레드 안전)
    - synchronized
    - 동기화 → 정적 필드가 초기화 된 후 싱글턴 객체를 얻으려고 하면 불필요하게 동기화가 일어나 성능 저하의 가능성이 있다 : 권장하지 X
    
    ```java
    public class Singleton {  
    	// private static으로 인스턴스 변수를 만듦
      private static Singleton instance;  
    	// private으로 생성자를 만들어 외부에서의 생성을 막음
      private Singleton() { }  
    	// synchronized 동기화를 이용해 스레드를 안전하게 만듦
      public static synchronized Singleton getInstance() {  
          if (instance == null) {  
              instance = new Singleton();  
          }  
          return instance;  
      }  
    }
    ```
    
- Double-checked locking
    - 코드가 다소 장황하지만 동기화 오버헤드를 피할 수 있으므로 성능 이점이 있다.
    - 스레드를 안전하게 만들면서 처음 생성 이후에는 synchronized를 실행하지 않아 성능 저하가 완화됨
    - 컴파일러가 최적화라는 명목으로 연산의 순서를 변경(reordering)할 수 있기에 멀티 스레드 환경에서는 직관을 벗어나는 동작을 보일 수 있음
    - volatile (휘발성의)
        - C/C++ 프로그래밍 언어에서 이 키워드는 최적화 등 컴파일러의 재량을 제한하는 역할을 한다
    
    ```java
    public class Singleton {  
        private static volatile Singleton instance;
      
        private Singleton() { }  
    
    	public static Singleton getInstance() {
    		if (instance == null) {
    			synchronized (Singleton.class) {
    				if (instance == null) {
    					instance = new Singleton();
    				}
    			}
    		}
    		return instance;
    	}
    
    	...
    }
    ```
    
- Intialization-on-demand holder pattern (요청 시 초기화 홀더 패턴)
    - 클래스 안에 클래스(holder)를 두어 JVM의 클래스 로더 매커니즘과 클래스가 로드되는 시점을 이용
    - JVM의 클래스 초기화 과정에서 보장되는 `원자적 특성`을 이용해 싱글톤의 초기화 문제에 대한 책임을 JVM에게 떠넘기는 걸 활용함
    - 클래스 안에 선언한 클래스인 holder에서 선언된 인스턴스는 static이기 때문에 클래스 로딩시점에서 한번만 호출된다. 또한 final을 사용해서 다시 값이 할당되지 않도록 만드는 방식을 사용한 것
    
    ```java
    public class Something {
        private Something() {
        }
     
        private static class LazyHolder {
            public static final Something INSTANCE = new Something();
        }
     
        public static Something getInstance() {
            return LazyHolder.INSTANCE;
        }
    }
    ```
    

### 참고 사이트

- 디자인 패턴. 싱글턴 패턴(Singletone pattern) : https://blog.hexabrain.net/394
- https://devmoony.tistory.com/43
- [https://gyoogle.dev/blog/design-pattern/Singleton Pattern.html](https://gyoogle.dev/blog/design-pattern/Singleton%20Pattern.html)