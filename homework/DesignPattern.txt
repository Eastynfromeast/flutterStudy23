# Design Pattern 
    - 의미 :  소프트웨어 디자인 패턴(software design pattern)은 소프트웨어 공학의 소프트웨어 디자인에서 특정 문맥에서 공통적으로 발생하는 문제에 대해 재사용 가능한 해결책이다. 소스나 기계 코드로 바로 전환될수 있는 완성된 디자인은 아니며, 다른 상황에 맞게 사용될 수 있는 문제들을 해결하는데에 쓰이는 서술이나 템플릿이다. 디자인 패턴은 프로그래머가 어플리케이션이나 시스템을 디자인할 때 공통된 문제들을 해결하는데에 쓰이는 형식화 된 가장 좋은 관행이다.
    
    - 역사 : 건축적 개념으로서의 패턴은 크리스토퍼 알렉산더(1977/79)가 창안하였다. 1987년, 켄트 벡과 워드 커닝햄은 프로그래밍, 구체적으로는 패턴 언어에 패턴을 적용하는 개념에 관한 실험을 시작했으며 그 해 OOPSLA 콘퍼런스에서 자신들의 결과를 제시하였다.[1][2] 그 뒤 여러 해에 걸쳐 벡과 커닝햄 등은 이 작업을 계속 진행하였다.디자인 패턴은 이른바 사인방(Gang of Four)이 쓴 Design Patterns: Elements of Reusable Object-Oriented Software라는 책이 1994년 출판된 이후 인기를 끌었다.

    - 분류
        1. 생성 패턴 Creational Pattern 
            객체 인스턴스를 생성하는 패턴, 클라이언트와 그 클라이언트가 생성해야 하는 객체 인스턴스 사이의 연결을 끊어주는 패턴?
            - 추상 팩토리 패턴 : 동일한 주제의 다른 팩토리를 묶음, 구상 클래스에 의존하지 않고도 서로 연관되거나 의존적인 객체로 이루어진 제품군을 생산하는 인터페이스를 제공. 구상 클래스는 서브 클래스에서 만듦 (구상 클래스 aka Concrete class ? new 키워드로 객체를 생성할 수 있는 클래스)
                클라이언트를 만들 때 추상 팩토리를 바탕으로 만듦. 실제 팩토리는 실행 시에 결정됨
                AbstractFactory는 모든 구상 팩토리에서 구현해야 하는 인터페이스. 객체를 만들 때 필요한 일련의 메소드가 정의되어 있음 
                Concrete Factory(구상 팩토리)는 서로 다른 객체를 구현. 클라이언트에서 객체(?)가 필요함녀 이 팩토리 가운데 적당한 것을 골라 쓸 수 있어 객체의 인스턴스를 직접 만들 필요가 X
           
            - 빌더 패턴 : 생성(construction)과 표기(representation)를 분리해 복잡한 객체를 생성
           
            - 팩토리 메서드 패턴 : 생성할 객체의 클래스를 국한하지 않고 객체를 생성, 객체를 생성할 때 필요한 인터페이스를 만듦, 어떤 클래스의 인스턴스를 만들지는 서브 클래스에서 결정. 
                Creator에는 제품으로 원하는 일을 할 때 필요한 모든 메소드가 구현되어 있어
                제품을 만들어주는 팩토리 메소드는 추상 메소드로 정의되어 있을 뿐 구현되어 있진 X
                ConcreteCreator는 실제로 제품을 생산하는 factoryMethod()를 구현 - 구상 클래스 인스턴스를 만드는 책임을 짐 
                제품 클래스는 모두 똑같은 인터페이스를 구현해야 그 제품을 사용할 클래스에서 구상 클래스가 아닌 인터페이스의 레퍼런스로 객체 참조 가능
            
            - 프로토타입 패턴 : 기존 객체를 복제함으로써 객체를 생성
           
            - 싱글턴 패턴 : 한 클래스에 한 객체만 존재하도록 제한
                특정 클래스에 객체 인스턴스가 하나만 만들어지도록 해주는 패턴. 클래스 인스턴스를 하나만 만들고 그 인스턴스로의 전역 접근 제공
        
        2. 구조 패턴 Structural Pattern
            클래스와 객체를 더 큰 구조로 만들 수 있게 구성을 사용하는 패턴
            - 어댑터 패턴 : 인터페이스가 호환되지 않는 클래스들을 함께 이용할 수 있도록 타 클래스의 인터페이스를 기존 인터페이스에 덧씌움, 특정 클래스 인터페이스를 클라이언트에서 요구하는 다른 인터페이스로 변환. 인터페이스가 호환되지 않아 같이 쓸 수 없었던 클래스를 사용할 수 있게 도와줌
            
            - 브릿지 패턴 : 추상화와 구현을 분리해 둘을 각각 따로 발전 시킬 수 있음
            
            - 컴포지트 패턴 : 0개, 1개 혹은 그 이상의 객체를 묶어 하나의 객체로 이용 가능, 객체를 트리구조로 구성해서 부분-전체 계층구조를 구현
            
            - 데코레이터 패턴 : 기존 객체의 매서드에 새로운 행동을 추가하거나 오버라이드 가능, 객체에 추가 요소를 동적으로 더할 수 있음. 서브클래스를 만들 때보다 유연하게 기능 확장 가능 
            
            - 파사드 패턴 : 많은 분량의 코드에 접근할 수 있는 단순한 인터페이스를 제공, 서브시스템에 있는 일련의 인터페이스를 통합 인터페이스로 묶어줌, 고수준 인터페이스도 정의하므로 서브시스템을 더 편리하게 사용 가능
            
            - 플라이웨이트 패턴 : 다수의 유사한 객체를 생성·조작하는 비용을 절감
            
            - 프록시 패턴 : 접근 조절, 비용 절감. 복잡도 감소를 위해 접근이 힘든 객체에 대한 대역 제공. 특정 객체로의 접근을 제어하는 대리인(특정 객체를 대변하는 객체)을 제공
        
        3. 행동 패턴 Behavioral Pattern
            클래스와 객체들이 상호작용하는 방법과 역할을 분담하는 방법을 다루는 패턴
            - 책임 연쇄 패턴 : 책임들이 연결되어 있어 내가 책임을 못 질 것 같으면 다음 책임자에게 자동으로 넘어가는 구조
           
            - 커맨드 패턴 : 위의 명령어를 각각 구현하는 것보다는 위 그림처럼 하나의 추상 클래스에 메서드를 하나 만들고 각 명령이 들어오면 그에 맞는 서브 클래스가 선택되어 실행하는 것
            
            - 해석자 패턴 : 문법 규칙을 클래스화한 구조를 갖는SQL 언어나 통신 프로토콜 같은 것을 개발할 때 사용
            
            - 반복자 패턴 : 반복이 필요한 자료구조를 모두 동일한 인터페이스를 통해 접근할 수 있도록 메서드를 이용해 자료구조를 활용할 수 있도록 해줌. 컬렉션의 구현 방법을 노출하지 않으면서 집합체 내의 모든 항목에 접근하는 방법을 제공 
            
            - 옵저버 패턴 : 어떤 클래스에 변화가 일어났을 때, 이를 감지하여 다른 클래스에 통보해주는 것, 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체에게 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다 의존성을 정의 
            
            - 전략 패턴 : 알고리즘 군을 정의하고 각각 하나의 클래스로 캡슐화한 다음, 필요할 때 서로 교환해서 사용할 수 있게 해준다.
            
            - 템플릿 메서드 패턴 : §상위 클래스에서는 추상적으로 표현하고 그 구체적인 내용은 하위 클래스에서 결정되는 디자인 패턴, 알고리즘의 골격을 정의. 템플릿 메소드를 사용하면 알고리즘 일부 단계를 서브클래스에서 구현할 수 있으며, 알고리즘의 구조는 그대로 유지하면서 알고리즘의 특정 단계를 서브클래스에서 재정의 가능 
                Abstract Calss에 템플릿 메소드가 들어있고
                템플릿 메소드는 알고리즘을 구현할 때 primitiveOperation을 활용
                abstract로 선언되었던 단계들은 Concrete class에서 구현 
                Concrete Class는 여러개가 있을 수 있고, 각 클래스는 템플릿 메소드에서 요구하는 모든 단계를 제공해야 함
           
            - 방문자 패턴 : 각 클래스의 데이터 구조로부터 처리 기능을 분리하여 별도의 visitor 클래스로 만들어놓고 해당 클래스의 메서드가 각 클래스를 돌아다니며 특정 작업을 수행하도록 하는 것
           
            - 중재자 패턴 : 클래스간의 복잡한 상호작용을 캡슐화하여 한 클래스에 위임해서 처리 하는 디자인 패턴
           
            - 상태 패턴 : 동일한 동작을 객체의 상태에 따라 다르게 처리해야 할 때 사용하는 디자인 패턴, 객체의 내부 상태가 바뀜에 따라서 객체의 행동을 바꿀 수 있어 마치 객체의 클래스가 바뀌는 것과 같은 결과를 얻을 수 있어
                State 인터페이스는 모든 구상 상태 클래스의 공통 인터페이스르 정의 
                모든 상태 클래스에서 같은 인터페이스를 구현하므로 바꿔가면서 쓸 수 있음
            
            - 기념품 패턴 : Ctrl + z 와 같은 undo 기능 개발할 때 유용한 디자인패턴. 클래스 설계 관점에서 객체의 정보를 저장
            

출처 
https://ko.wikipedia.org/wiki/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4_%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4
https://ko.wikipedia.org/wiki/%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4_(%EC%B1%85)#%ED%96%89%EB%8F%99_%ED%8C%A8%ED%84%B4(Behavioral_Patterns)
