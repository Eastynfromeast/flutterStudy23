# 인터페이스

### 컴퓨팅 단계에서의 인터페이스

인터페이스(interface)는 **서로 다른 두 개의 시스템, 장치 사이에서 정보나 신호를 주고받는 경우의 접점이나 경계면**이다. 즉, 사용자가 기기를 쉽게 동작시키는데 도움을 주는 시스템을 의미한다. 컴퓨팅에서 컴퓨터 시스템끼리 정보를 교환하는 공유 경계이다. (출처: [위키피디아](https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%8C%85)))

- 하드웨어 인터페이스 : 다양한 버스(**버스**([영어](https://ko.wikipedia.org/wiki/%EC%98%81%EC%96%B4): bus[[1]](https://ko.wikipedia.org/wiki/%EB%B2%84%EC%8A%A4_(%EC%BB%B4%ED%93%A8%ED%8C%85)#cite_note-1), [문화어](https://ko.wikipedia.org/wiki/%EB%AC%B8%ED%99%94%EC%96%B4): 모선)는 [컴퓨터](https://ko.wikipedia.org/wiki/%EC%BB%B4%ED%93%A8%ED%84%B0) 안의 부품들 간에, 또는 컴퓨터 간에 데이터와 정보를 전송하는 통로(통신 시스템)이다. 이러한 표현에는 관련된 모든 하드웨어 부품들 (선, 광섬유 등) 및 통신 프로토콜을 포함한 소프트웨어를 아우른다), 기억 장치, 기타 입출력 장치와 같은 구성 요소들 중 다수에 존재.

- 소프트웨어 인터페이스 : 여러 종류의 여러 수준의 인터페이스 지칭 가능. 즉, 운영 체제는 하드웨어와 인터페이스(접속)할 수 있다. 이 운영 체제에서 실행되는 [응용 소프트웨어](https://ko.wikipedia.org/wiki/%EC%9D%91%EC%9A%A9_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4)나 [프로그램](https://ko.wikipedia.org/wiki/%EC%BB%B4%ED%93%A8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8)은 [스트림](https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%8A%B8%EB%A6%BC_(%EC%BB%B4%ED%93%A8%ED%8C%85))을 통해 상호작용할 수 있으며 [객체 지향 프로그램](https://ko.wikipedia.org/wiki/%EA%B0%9D%EC%B2%B4_%EC%A7%80%ED%96%A5_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)들의 경우 응용 프로그램 내의 오브젝트들은 [메소드](https://ko.wikipedia.org/wiki/%EB%A9%94%EC%86%8C%EB%93%9C)를 통해 상호작용해야 할 수 있다.

- 사용자 인터페이스

⇒ 인터페이스(영어: Interface, 문화어: 대면부, 결합부 또는 접속기)는 사물 간 또는 사물과 인간 간의 의사소통이 가능하도록 일시적 혹은 영속적인 접근을 목적으로 만들어진 물리적, 가상적 매개체를 의미

### 자바에서의 인터페이스
인터페이스(interface)란 다른 클래스를 작성할 때 기본이 되는 틀을 제공하면서, 다른 클래스 사이의 중간 매개 역할까지 담당하는 일종의 추상 클래스
- 오로지 추상 메소드와 상수만을 포함할 수 있다 (자바에서)

```java
접근제어자 interface 인터페이스이름 {
		// 인터페이스의 모든 필드는 public static final
    public static final 타입 상수이름 = 값;

    ...
	// 모든 메소드는 public abstract
    public abstract 메소드이름(매개변수목록);

    ...

}
```

### 클래스를 이용한 다중 상속
- 인터페이스는 인터페이스로부터만 상속을 받을 수 있으며, 여러 인터페이스를 상속받을 수 있습니다.
- 문제점 : 메소드 출처의 모호성 등의 문제 발생

### 인터페이스의 장점
1. 대규모 프로젝트 개발 시 일관되고 정형화된 개발을 위한 표준화 가능
2. 클래스의 작성과 인터페이스의 구현을 동시에 진행 가능 → 개발 시간 단축 가능
3. 클래스와 클래스 간의 관계를 인터페이스로 연결하면 클래스마다 독립적인 프로그래밍이 가능 

### 인터페이스의 역할
1. 대표적인 규제 like abstract,final
    1. 어떤 객체가 있고 그 객체가 특정 인터페이스를 사용한다면 객체는 반드시 인터페이스의 메소드를 구현해야
    2. 메소드 구현 안하면 컴파일도 안됨

### 인터페이스는 상속이 아니다
상속이 상위 클래스의 기능을 하위 클래스가 물려 받는 것이라고 한다면, 인터페이스는 하위 클래스에 특정한 메소드가 반드시 존재하도록 강제한다.
- 상속 : extends
- 인터페이스 : implements
- ⇒ 클래스 A는 인터페이스 I를 **구현**함

### 인터페이스가 필요한 이유
**협업자 상호간에 구체적인 약속**을 하면 된다. 특히 그 약속을 코드 안에서 할 수 있다면 참 좋을 것이다. 그렇다. 인터페이스가 필요한 순간이다.

## 인터페이스의 규칙
1. 하나의 클래스가 여러개의 인터페이스를 구현할 수 있다
    1. 대신 하나라도 구현하지 않으면 오류
2. 인터페이스도 상속 가능
3. 인터페이스의 멤버는 반드시 **public**
    1. 인터페이스는 그 인터페이스를 구현한 클래스를 어떻게 조작할 것인가를 규정한다. 그렇기 때문에 외부에서 제어 할 수 있는 가장 개방적인 접근 제어자인 public만을 허용한다.
4. abstract(추상 클래스) ≠ interface
    1. 비슷하지만 다름
    2. 추상 클래스는 일반 클래스, 로직이나 상태 가질 수 잇음
    3. 인터페이스는 인터페이스, 로직이나 상태 못 가짐

### 참고 사이트
[https://ditoday.com/ui-이해하기-인터페이스란-무엇인가/](https://ditoday.com/ui-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/)
http://www.tcpschool.com/java/java_polymorphism_interface
https://opentutorials.org/course/1223/6063