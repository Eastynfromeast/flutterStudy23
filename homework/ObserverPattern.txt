# Observer pattern

옵서버 패턴(observer pattern)은 **객체의 상태 변화를 관찰하는 관찰자**들, 즉 옵저버들의 목록을 객체에 등록하여 상태 변화가 있을 때마다 메서드 등을 통해 객체가 직접 목록의 각 옵저버에게 통지하도록 하는 디자인 패턴이다.

주로 **분산 이벤트 핸들링 시스템**을 구현하는 데 사용된다. 발행/구독 모델로 알려져 있기도 하다.

⇒ 어떤 객체의 상태가 변할 때 그와 연관된 객체들에게 알림을 보내는 디자인 패턴

1:1 또는 1:N도 가능

## 옵저버 패턴의 장단점

### 장점

1. 실시간으로 객체의 변경사항을 다른 객체에 알릴 수 있다
2. 느슨한 결합(Loose Coupling)으로 시스템이 유연, 객체간의 의존성을 없앨 수 있다
    1. 느슨한 결합 : 다른 클래스를 직접적으로 사용하는 클래스의 의존성을 줄이는 것

### 단점

1. 너무 많이 사용할 경우 상태 관리가 힘듦
2. 데이터 배분에 문제가 발생할 경우 큰 문제가 될 수 있음

## 옵저버 패턴 원리

옵저버 또는 Listener라 불리는 하나 이상의 객체를 관찰 대상이 되는 객체에 등록시킨 후,

각각의 옵저버들은 관찰 대상인 객체가 발생시키는 이벤트를 받아 처리 

1. 이벤트가 발생하면 각 옵저버는 callback을 받음
    1. `notify()` : 관찰 대상이 발행한 메시지 이외에 옵저버 자신이 생성한 인자값도 전달 가능 
2. 각각의 파생 옵저버는 notify를 구현함으로서 이벤트가 발생했을 때 처리할 각자의 동작 정의 할 필요 있어
    1. register(등록) 메소드 : 새로운 옵저버를 목록에 등록
    2. unregister(제거) 메소드 : 목록에서 옵저버를 없앰 
3. 느슨한 결합 ⇒ 인터페이스를 포함하는 방식으로 많이 구현
4. 옵저서 패턴이 많이 쓰인 시스템에서는 재귀 호출을 막는 매커니즘이 필요 
    1. 이벤트 X 발생 : 옵저버 A가 옵저버 B를 갱신 ,B가 이 처리를 위해 A를 갱신하면 A가 다시 이벤트 X 발생시켜??
    2. ⇒ A가 이벤트 X를 다시 발생시키지 않는 방법 고안 필요 

옵서버 패턴은 (Model-View-controller, MVC) 패러다임과 자주 결합된다. 옵저버 패턴은 MVC에서 모델과 뷰 사이를 느슨히 연결하기 위해 사용된다.
대표적으로 모델에서 일어나는 이벤트를 통보받는 옵저버는 뷰의 내용을 바꾸는 스위치를 작동시킨다.

### 참고 사이트

- [https://velog.io/@octo__/옵저버-패턴Observer-Pattern](https://velog.io/@octo__/%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4Observer-Pattern)
- https://pjh3749.tistory.com/m/266
- https://refactoring.guru/ko/design-patterns/observer