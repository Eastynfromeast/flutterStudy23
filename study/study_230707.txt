**프로젝트 설계**

예전 ) 기획자 → 디자이너, 개발자 재구성 & 설계 / 용어 등의 싱크 문제 

요새) DDD - 프로젝트 철학

행동 정의 
    사용자 행동 패턴
모델 정의 
    들어가는 속성들 잘 정의
    네이밍 

**아키텍처** 
    디렉토리 구조를 짜는 것 - 디렉토리 구조 최적화 
        개발자의 경험에 의해서
        중요한 디렉토리와 그렇지 않은 것들은 나눠야
        utils은 안 중요 
        service (기능 정의), repository, cubit, models

    구성 이유? 정리 잘하고 논리적으로 대응하기 위해 
    프레임워크에서 제공하는 샘플들 참조 가능 

View 
    render

View Model 
    state 관리
    data 관리
        백엔드 개념을 가져와서 사용    
    모든 이벤트들 - routing 까지
    왜? 재사용 가능 

SPA 웹과 앱의 경계 허물어져
네이티브 파워를 가져다 쓸 수 있는 API 발전
PWA 
    웹으로 만들어졌지만 앱처럼 쓸 수 있음 
앱의 큰 장점? PUSH 
어플리케이션 데이터를 쌓고 지우고 공유하고 

인플루언서 
    PR - 셀프 마케팅
    요청 수락 및 거부 가능

마케터
    인플루언서 컨택
    채팅 가능 
    캠페인 
        제안 데이터 

모델 (프로그래밍) (데이터 형태 ) → DB 생성 
    DB table : id 참조 - 절대 바뀌면 안돼 = uuid 

Amplify
    아마존 웹 서비스의 프레임 워크 
    firebase와 비슷 
    모바일 개발에 필요한 요소들 제공 : 인증, 서버 등등

GraphQL Api

유저 - 인플루언서 
    채팅 모델 
    모델은 최소한의 요소만 담는게 중요 
    채팅 타이틀
    누가 들어가 있는지
    마지막 메시지 등( 카톡 리스트) 

캠페인 모델
    캠페인 제안 : 여러명에게 컨택